@model OMInsurance.WebApps.Models.RepresentativeEditModel
@Html.HiddenFor(m => m.Id)
<div class="row margined">
    <div class="col-md-12">
        @if (Model.Messages.Count > 0)
        {
            <div class="row margined">
                <div class="col-md-12">
                    <div class="alert alert-danger" role="alert">
                        @foreach (var message in Model.Messages)
                        {
                            <span>@message</span>
                        }
                    </div>
                </div>
            </div>
        }
    </div>
</div>
<div class="representative">
    <div class="col-md-6">
        <div class="row margined">
            <div class="col-md-4">
                <div>
                    @Html.DisplayNameFor(m => m.RepresentativeTypeId)
                </div>
            </div>
            <div class="col-md-8">
                <div>
                    @Html.DropDownListFor(model => model.RepresentativeTypeId, Model.RepresentativeTypes, new { @class = "form-control representativeType", onchange = "RepresentativeProcessor.setType(this)" })
                </div>
            </div>
        </div>
        <div class="row margined">
            <div class="col-md-4">
                <div>
                    @Html.DisplayNameFor(m => m.Lastname)
                </div>
            </div>
            <div class="col-md-8">
                <div>
                    @Html.TextBoxFor(model => model.Lastname, new { @class = "form-control lastname capitalized" })
                    @Html.ValidationMessageFor(m => m.Lastname)
                </div>
            </div>
        </div>
        <div class="row margined">
            <div class="col-md-4">
                <div>
                    @Html.DisplayNameFor(m => m.Firstname)
                </div>
            </div>
            <div class="col-md-8">
                <div>
                    @Html.TextBoxFor(model => model.Firstname, new { @class = "form-control firstname capitalized" })
                    @Html.ValidationMessageFor(m => m.Firstname)
                </div>
            </div>
        </div>
        <div class="row margined">
            <div class="col-md-4">
                <div>
                    @Html.DisplayNameFor(m => m.Secondname)
                </div>
            </div>
            <div class="col-md-8">
                <div>
                    @Html.TextBoxFor(model => model.Secondname, new { @class = "form-control secondname capitalized" })
                    @Html.ValidationMessageFor(m => m.Secondname)
                </div>
            </div>
        </div>
        <div class="row margined">
            <div class="col-md-4">
                <div>
                    @Html.DisplayNameFor(m => m.Birthday)
                </div>
            </div>
            <div class="col-md-8">
                <div>
                    @Html.TextBoxFor(m => m.Birthday, Model.Birthday.HasValue ? Model.Birthday.Value.ToShortDateString() : String.Empty,
                        new { @class = "form-control datepicker birthday", id = string.Format("Birthday{0}", Model.Id) })
                    @Html.ValidationMessageFor(m => m.Birthday)
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="row margined">
            <div class="col-md-4">
                <div>
                    @Html.DisplayNameFor(m => m.DocumentTypeId)
                </div>
            </div>
            <div class="col-md-8">
                <div>
                    @Html.DropDownListFor(model => model.DocumentTypeId, Model.DocumentTypes, new { @class = "form-control representativeDocumentType", onchange = "RepresentativeProcessor.setPasportMasks(this)" })
                </div>
            </div>
        </div>
        <div class="row margined">
            <div class="col-md-4">
                <div>
                    @Html.DisplayNameFor(m => m.Series)
                </div>
            </div>
            <div class="col-md-8">
                <div>
                    @Html.TextBoxFor(model => model.Series, new { @class = "form-control series capitalized" })
                </div>
            </div>
        </div>
        <div class="row margined">
            <div class="col-md-4">
                <div>
                    @Html.DisplayNameFor(m => m.Number)
                </div>
            </div>
            <div class="col-md-8">
                <div>
                    @Html.TextBoxFor(model => model.Number, new { @class = "form-control number capitalized" })
                </div>
            </div>
        </div>
        <div class="row margined">
            <div class="col-md-4">
                <div>
                    @Html.DisplayNameFor(m => m.IssueDate)
                </div>
            </div>
            <div class="col-md-8">
                <div>
                    @Html.TextBoxFor(m => m.IssueDate, Model.IssueDate.HasValue ? Model.IssueDate.Value.ToShortDateString() : String.Empty,
                         new { @class = "form-control datepicker issueDate", id = string.Format("issueDate{0}", Model.Id) })
                    @Html.ValidationMessageFor(m => m.IssueDate)
                </div>
            </div>
        </div>
        <div class="row margined">
            <div class="col-md-4">
                <div>
                    @Html.DisplayNameFor(m => m.IssueDepartment)
                </div>
            </div>
            <div class="col-md-8">
                <div>
                    @Html.TextAreaFor(model => model.IssueDepartment, new { @class = "form-control departmentName" })
                    @Html.ValidationMessageFor(m => m.IssueDepartment)
                </div>
            </div>
        </div>
    </div>
</div>
